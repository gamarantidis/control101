<deployment-project plugin="plugin.apptool" plugin-version="1.0">
  <configuration build-checksum="4048122873" file="C:\Users\Anthony Rossiter\Documents\matlab project\control101\control101\PI tuning methods\matlabCode\PID tuning rules.prj" location="C:\Users\Anthony Rossiter\Documents\matlab project\control101\control101\PI tuning methods\matlabCode" name="PID tuning rules" target="target.mlapps" target-name="Package App">
    <param.appname>PID tuning rules</param.appname>
    <param.authnamewatermark>J A Rossiter,  Visioli,  Dormido,  Bars</param.authnamewatermark>
    <param.email>j.a.rossiter@sheffield.ac.uk</param.email>
    <param.company>University of Sheffield</param.company>
    <param.icon>${PROJECT_ROOT}\PID tuning rules_resources\icon_24.png</param.icon>
    <param.icons>
      <file>${PROJECT_ROOT}\PID tuning rules_resources\icon_48.png</file>
      <file>${PROJECT_ROOT}\PID tuning rules_resources\icon_24.png</file>
      <file>${PROJECT_ROOT}\PID tuning rules_resources\icon_16.png</file>
    </param.icons>
    <param.summary>Explore multiple PID tuning methods</param.summary>
    <param.description>This resource provides an interactive app file (MATLAB virtual laboratory) which allows users to explore and analyse the tuning of a PID compensators usiong a range of well known tuning methods (e.g. Ziegler Nichols, Cohen Coon, AMIGO, Lambda tuning, Skogestad) which deploy the characteristics of  open-loop step response as a guide. A range of low order systems are included to allow users to explore a range of scenarios. More detailed descriptions and help are in the partner livescript file pidtuningrules_manual.mlx.</param.description>
    <param.screenshot>${PROJECT_ROOT}\responses3b.jpg</param.screenshot>
    <param.version>1.0</param.version>
    <param.products.name>
      <item>MATLAB</item>
      <item>Control System Toolbox</item>
      <item>Symbolic Math Toolbox</item>
    </param.products.name>
    <param.products.id>
      <item>1</item>
      <item>3</item>
      <item>15</item>
    </param.products.id>
    <param.products.version>
      <item>9.14</item>
      <item>10.13</item>
      <item>9.3</item>
    </param.products.version>
    <param.platforms />
    <param.output>${PROJECT_ROOT}</param.output>
    <param.guid>ce21c259-c9af-46e2-95e3-5ce309f9c75e</param.guid>
    <unset>
      <param.version />
      <param.platforms />
      <param.output />
    </unset>
    <fileset.main>
      <file>${PROJECT_ROOT}\pidtuningrules.mlapp</file>
    </fileset.main>
    <fileset.depfun>
      <file>${PROJECT_ROOT}\Logo-UNED.png</file>
      <file>${PROJECT_ROOT}\logo_brescia.png</file>
      <file>${PROJECT_ROOT}\ruth_logo.jpg</file>
      <file>${PROJECT_ROOT}\UoSlogo.png</file>
    </fileset.depfun>
    <fileset.resources />
    <fileset.package />
    <build-deliverables>
      <file location="C:\Users\Anthony Rossiter\Documents\matlab project\control101\control101\PI tuning methods" name="matlabCode" optional="false">C:\Users\Anthony Rossiter\Documents\matlab project\control101\control101\PI tuning methods\matlabCode</file>
    </build-deliverables>
    <workflow />
    <matlab>
      <root>C:\Program Files\MATLAB\R2023a</root>
      <toolboxes />
    </matlab>
    <platform>
      <unix>false</unix>
      <mac>false</mac>
      <windows>true</windows>
      <win2k>false</win2k>
      <winxp>false</winxp>
      <vista>false</vista>
      <linux>false</linux>
      <solaris>false</solaris>
      <osver>10.0</osver>
      <os32>false</os32>
      <os64>true</os64>
      <arch>win64</arch>
      <matlab>true</matlab>
    </platform>
  </configuration>
</deployment-project>